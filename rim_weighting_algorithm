import math as m, pyodbc

def calcFreq(responses):
    '''Calculates frequencies for response'''
    freq = {}
    for response in responses:
        if response in freq.keys():
            freq[response] +=1
        else:
            freq[response] = 1
    return freq

def crosstabFreq(responses1, responses2):
    '''Cross-tabulates 2 responses and returns frequencies'''
    return calcFreq(list(zip(responses1, responses2)))

def calcCtFreq (ct):
	'''Calculates frequencies of variable responses from a crosstab'''
	r1freq = {}
	r2freq = {}

	for (r1, r2), freq in ct.items():
		if r1 in r1freq.keys():
			r1freq[r1] += freq
		else:
			r1freq[r1] = freq

	for (r1, r2), freq in ct.items():
		if r2 in r2freq.keys():
			r2freq[r2] += freq
		else:
			r2freq[r2] = freq

	return dict(sorted(r1freq.items())), dict(sorted(r2freq.items()))

def diffCdf(cf, df):
	'''Calculates total difference between current and desired frequencies'''
	a = 0
	for x, y in zip(cf.values(), df.values()):
		a += abs(x - y)
	return a

def calcWeights(cf, df):
	'''Calculates weight factors as df/cf quotient'''
	weights = []
	for x, y in zip(cf.values(), df.values()):
		weights.append(y/x)
	return weights

#Creates list for each variable
genders = []
ages = []
ageBins = []
deodorantUses = []

#Connects to SQL Server Database and retrieves data
connection = pyodbc.connect('Driver={SQL Server};'
					        'Server=.\sqlexpress;'
					        'Database=Nivea;'
					        'Trusted_connection=yes')

cursor = connection.cursor()
cursor.execute('SELECT * FROM Nivea.dbo.weighted_custom')

data = []
for row in cursor:
	data.append(row[6])

#Separates data by variable and appends these to respective variable lists
for i in data:
	x = i.split('&')

	for i in x:
		if 'Qs0' in i:
			genders.append(i.replace('Qs0=',''))
		elif 'Qs1_1' in i:
			ages.append(int(i.replace('Qs1_1=','')))
		elif 'Qs3' in i:
			deodorantUses.append(i.replace('Qs3=',''))

#Splits age data into age bins
for i in range(len(ages)):
    ageBins.append(m.floor((ages[i]-1)/10))

#Sets desired frequency distribution
daf = {'1':75, '2':400, '3':500, '4':300, '5':200, '6':29, '7':1}
dgf = {'1':700, '2':805}

#Assigns actual and current crosstabulation based on actual frequencies
act = crosstabFreq(ageBins, genders)
ct = crosstabFreq(ageBins, genders)

#Assigns current frequencies
caf, cgf = calcCtFreq(ct)

#Rim-Weighting Algorithm
iteration = 0
while diffCdf(caf, daf)/diffCdf(cgf, dgf) > 0.0000000000000001:

	#Updates current frequencies
	caf, cgf = calcCtFreq(ct)

	#Calculates weights based on gender
	weights = calcWeights(cgf, dgf)

	#Applies weights based on gender and updates crosstab frequencies
	for k, v in ct.items():
		if k[1] == '1':
			v = v*weights[0]
		elif k[1] == '2':
			v = v*weights[1]
		ct[k] = v


	#Updates current frequencies after weighting for age
	caf, cgf = calcCtFreq(ct)

	#Calculates weights based on age
	weights = calcWeights(caf, daf)

	#Applies weights based on age and updates crosstab frequencies
	for k, v in ct.items():
		if k[0] == 1:
			v = v*weights[0]
		elif k[0] == 2:
			v = v*weights[1]
		elif k[0] == 3:
			v = v*weights[2]
		elif k[0] == 4:
			v = v*weights[3]
		elif k[0] == 5:
			v = v*weights[4]
		elif k[0] == 6:
			v = v*weights[5]
		elif k[0] == 7:
			v = v*weights[6]
		ct[k] = v

	#Updates current frequencies after weighting for gender
	caf, cgf = calcCtFreq(ct)

	x = diffCdf(caf, daf)
	y = diffCdf(cgf, dgf)

	iteration +=1
	print(f'iteration: {iteration} \n\
	total difference between actual and desired frequencies: {x/y}')

weights = calcWeights(act, ct)
print(f'\nWeights calculated after {iteration} iterations:\n{weights}')
