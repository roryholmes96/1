import math as m, pyodbc

def calcFreq(responses):
    '''Calculates frequencies for response'''
    freq = {}
    for response in responses:
        if response in freq.keys():
            freq[response] +=1
        else:
            freq[response] = 1
    return freq

def crosstabFreq(responses1, responses2):
    '''Cross-tabulates 2 responses and returns frequencies'''
    return calcFreq(list(zip(responses1, responses2)))

def calcCgf(ct): 
	'''Calculates current gender frequencies from crosstab dictionary'''
	return \
	{'1': (ct[(1,'1')] + ct[(2, '1')] + ct[(3,'1')] + ct[(4,'1')]\
	+ ct[(5,'1')] + ct[(6,'1')] + ct[(7,'1')]), \
	'2': (ct[(1,'2')] + ct[(2, '2')] + ct[(3,'2')] + ct[(4,'2')]\
	+ ct[(5,'2')] + ct[(6,'2')] + ct[(7,'2')])}

def calcCaf(ct):
	'''Calculates current age frequencies from crosstab dictionary'''
	return {'1': (ct[(1,'1')] + ct[(1, '2')]),\
	'2': (ct[(2,'1')] + ct[(2, '2')]),\
	'3': (ct[(3,'1')] + ct[(3, '2')]),\
	'4': (ct[(4,'1')] + ct[(4, '2')]),\
	'5': (ct[(5,'1')] + ct[(5, '2')]),\
	'6': (ct[(6,'1')] + ct[(6, '2')]),\
	'7': (ct[(7,'1')] + ct[(7, '2')])}

def diffCdf(cf, df):
	'''calculates total difference between current and desired frequencies'''
	a = 0
	for x, y in zip(cf.values(), df.values()):
		a += abs(x - y)
	return a

def calcWeights(cf, df):
	'''calculates weight factors as df/cf quotient'''
	weights = []
	for x, y in zip(cf.values(), df.values()):
		weights.append(y/x)
	return weights

#Creates list for each variable
genders = []
ages = []
ageBins = []
deodorantUses = []

#Connects to SQL Server Database and retrieves data
connection = pyodbc.connect('Driver={SQL Server};'
					        'Server=.\sqlexpress;'
					        'Database=Nivea;'
					        'Trusted_connection=yes')

cursor = connection.cursor()
cursor.execute('SELEct * FROM Nivea.dbo.weighted_custom')

data = []
for row in cursor:
	data.append(row[6])

#Separates data into variables and appends these to respective variable lists
for i in data:
	x = i.split('&')

	for i in x:
		if 'Qs0' in i:
			genders.append(i.replace('Qs0=',''))
		elif 'Qs1_1' in i:
			ages.append(int(i.replace('Qs1_1=','')))
		elif 'Qs3' in i:
			deodorantUses.append(i.replace('Qs3=',''))

#Splits age data into age bins
for i in range(len(ages)):
    ageBins.append(m.floor((ages[i]-1)/10))

#Sets desired frequency distribution
daf = {'1':75, '2':400, '3':500, '4':300, '5':200, '6':29, '7':1}
dgf = {'1':700, '2':805}

#Calculates initial crosstabulation based on actual frequencies
act = crosstabFreq(ageBins, genders)
ct = crosstabFreq(ageBins, genders)

#Assigns current frequencies
caf = calcCaf(ct)
cgf = calcCgf(ct)

#Rim-Weighting Algorithm
iteration = 0
while diffCdf(caf, daf)/diffCdf(cgf, dgf) > 0.0000000000000001:

	#Calulcates current frequencies for gender
	cgf = calcCgf(ct)

	#Calculates weights based on gender
	weights = calcWeights(cgf, dgf)

	#Applies weights based on gender and updates dictionary crosstab frequencies
	for k, v in ct.items():
		if k[1] == '1':
			v = v*weights[0]
		elif k[1] == '2':
			v = v*weights[1]
		ct[k] = v

	#Updates current frequencies after weighting for age
	caf = calcCaf(ct)

	#Calculates weights based on age
	weights = calcWeights(caf, daf)

	#Applies weights based on age and updates dictionary crosstab frequencies
	for k, v in ct.items():
		if k[0] == 1:
			v = v*weights[0]
		elif k[0] == 2:
			v = v*weights[1]
		elif k[0] == 3:
			v = v*weights[2]
		elif k[0] == 4:
			v = v*weights[3]
		elif k[0] == 5:
			v = v*weights[4]
		elif k[0] == 6:
			v = v*weights[5]
		elif k[0] == 7:
			v = v*weights[6]
		ct[k] = v

	#Updates current frequencies after weighting
	cgf = calcCgf(ct)
	caf = calcCaf(ct)

	x = diffCdf(caf, daf)
	y = diffCdf(cgf, dgf)

	iteration +=1
	print(f'iteration: {iteration} \n\
	total difference between actual and desired frequencies: {x/y}')

weights = calcWeights(act, ct)
print(f'\nWeights calculated after {iteration} iterations:\n{weights}')
